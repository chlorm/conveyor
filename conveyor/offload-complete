#!/usr/bin/env python3

# Copyright (c) 2017-2018, Cody Opel <codyopel@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import subprocess

data_dir = os.path.abspath(os.path.join(os.path.expanduser('~'), 'Downloads', 'Complete'))
offload_dir = 'gd:/offload/'
rclone_args = [
  'rclone',
  '-vv',
  '--stats', '5s',
  'move',
  '--low-level-retries', '20',
  '--tpslimit', '4',
  '--tpslimit-burst', '10',
  '--transfers', '1'
]

downloads = []
failed_transfers = []
for entry in os.scandir(data_dir):
  downloads.append(os.path.join(data_dir, entry.name))

for download in sorted(downloads, key=os.path.getmtime):
  print(download)
  # Rclone does not work like the Unix `mv` command, the target directory must also be
  # specified when moving a directory.
  if os.path.isdir(download):
    offload_path = os.path.join(offload_dir, os.path.basename(download))
  else:
    offload_path = offload_dir
  try:
    p = subprocess.Popen(rclone_args + [download, offload_path])
    p.wait()
  except Exception as error:
    failed_transfers.append(download)
    #raise('Transferring %s failed' % download)
    #print(repr(error))

print('\n\n\nFailed Transfers:\n\n')
for i in failed_transfers:
  print(i)
