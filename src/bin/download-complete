#!bash
# Copyright (c) 2017, Cody Opel <codyopel@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Hard links downloads on completion from the data directory to the process directory.

# FIXME: only hard link files from DOWNLOAD_DATA_DIR, ignore other source locations.
# TODO: hardlink all torrentfiles containing archives to a temp directory and
#       then continue processing files to complete directory, prevents losing
#       data if torrent is removed while unpacking.
# TODO: add case for password protected archives

set -o errexit
set -o errtrace
set -o functrace
set -o nounset
set -o pipefail

PREFIX="$(readlink -f "$(readlink -f "$(dirname "$(readlink -f "$0")")")"/..)"
source "$PREFIX/share/conveyor/common.bash"

exec > >(tee -ia "$DOWNLOAD_COMPLETE_LOG_FILE")
exec 2> >(tee -ia "$DOWNLOAD_COMPLETE_LOG_FILE" >&2)

declare -r torrentid="$1"
declare -r torrentname="$2"
declare -r torrentpath="$3"

if [ -z "$DOWNLOAD_PROCESS_DIR" ]; then
  echo "DOWNLOAD_PROCESS_DIR not set" >&2
  exit 1
fi

if [ -z "$DOWNLOAD_DATA_DIR" ]; then
  echo "DOWNLOAD_DATA_DIR not set" >&2
  exit 1
fi

if [ ! -d "$DOWNLOAD_PROCESS_DIR" ]; then
  mkdir --verbose --parents "$DOWNLOAD_PROCESS_DIR"
fi

if [ ! -d "$DOWNLOAD_DATA_DIR" ]; then
  mkdir --verbose --parents "$DOWNLOAD_DATA_DIR"
fi

# Make sure not to link the top-level torrent data directory
# FIXME: assumes a fixed directory structure
if [ "$DOWNLOAD_PROCESS_DIR/$(basename "$DOWNLOAD_DATA_DIR")" == "$DOWNLOAD_PROCESS_DIR/$(basename "$torrentpath/$torrentname")" ]; then
  exit 0
fi

if [ ! -f "$DOWNLOAD_COMPLETE_LOG_FILE" ]; then
  touch "$DOWNLOAD_COMPLETE_LOG_FILE"
fi

if [ ! -e "$torrentpath/$torrentname" ]; then
  echo "torrent does not exist: $torrentpath/$torrentname" >&2
  exit 1
fi

declare -a FilesToLink=()
declare IndividualFile=false
if [ -f "$torrentpath/$torrentname" ]; then
  IndividualFile=true
  cd "$torrentpath"
  FilesToLink=("$torrentname")
elif [ -d "$torrentpath/$torrentname" ]; then
  cd "$torrentpath/$torrentname"
  mapfile -t FilesToLink < <(rc_ls .)
else
  echo "failed to link, not a file or directory: $torrentpath/$torrentname" >&2
  exit 1
fi

set +o nounset
if [ -z "${FilesToLink[*]}" ]; then
  echo "no files found to link: $torrentpath/$torrentname" >&2
  exit 1
fi
set -o nounset
set +o nounset
for File in "${FilesToLink[@]}"; do
  if [ "$IndividualFile" == 'false' ]; then
    mkdir --verbose --parents \
      "$DOWNLOAD_PROCESS_DIR/$torrentname/$(dirname "$File")" || {
      echo "failed to create directory: $DOWNLOAD_PROCESS_DIR/$torrentname/$(dirname "$File")" >&2
      exit 1
    }
  fi
  # Hard link files to the complete directory
  if [ "$IndividualFile" == 'true' ]; then
    ln --verbose "$File" "$DOWNLOAD_PROCESS_DIR/$File"
  else
    ln --verbose "$File" "$DOWNLOAD_PROCESS_DIR/$torrentname/$File"
  fi
done
set -o nounset

exit 0
