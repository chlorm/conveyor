#!/usr/bin/env bash
# Copyright (c) 2017, Cody Opel <codyopel@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Hard links downloads on completion from the data directory to the complete directory.

# FIXME: only hard link files from DOWNLOAD_DATA_DIR, ignore other source locations.
# TODO: unpack archive files rather than hard linking

set -o errexit
set -o errtrace
set -o functrace
set -o nounset
set -o pipefail

PREFIX="$(readlink -f "$(readlink -f "$(dirname "$(readlink -f "$0")")")"/..)"
source "$PREFIX/share/conveyor/common.bash"

declare -r torrentid="$1"
declare -r torrentname="$2"
declare -r torrentpath="$3"

if [ ! -d "$DOWNLOAD_COMPLETE_DIR" ]; then
  mkdir --parents "$DOWNLOAD_COMPLETE_DIR"
fi

if [ ! -d "$DOWNLOAD_DATA_DIR" ]; then
  mkdir --parents "$DOWNLOAD_DATA_DIR"
fi

# Make sure not to link the top-level torrent data directory
# FIXME: assumes a fixed directory structure
if [ "$DOWNLOAD_COMPLETE_DIR/$(basename "$DOWNLOAD_DATA_DIR")" == "$DOWNLOAD_COMPLETE_DIR/$(basename "$torrentpath/$torrentname")" ]; then
  exit 0
fi

if [ ! -f "$DOWNLOAD_COMPLETE_LOG_FILE" ]; then
  touch "$DOWNLOAD_COMPLETE_LOG_FILE"
fi

if [ ! -e "$torrentpath/$torrentname" ]; then
  echo "torrent does not exist: $torrentpath/$torrentname" >> "$DOWNLOAD_COMPLETE_LOG_FILE"
  exit 1
fi

# Hard link files to the complete directory
# FIXME: merge directory and file handling together
if [ -f "$torrentpath/$torrentname" ]; then
  if [ ! -f "$DOWNLOAD_COMPLETE_DIR" ]; then
    mkdir --parents "$DOWNLOAD_COMPLETE_DIR"
  fi
  ln "$torrentpath/$torrentname" "$DOWNLOAD_COMPLETE_DIR/$torrentname" || {
    echo "failed to link: $torrentpath/$torrentname" >> "$DOWNLOAD_COMPLETE_LOG_FILE"
    exit 1
  }
# Directories cannot be hard linked, so iterate over files.
elif [ -d "$torrentpath/$torrentname" ]; then
  pushd "$torrentpath/$torrentname"
    mapfile -t FilesToLink < <(
      RCLONE_LS_EXTRA_ARGS+=('--exclude' "$DOWNLOAD_COMPLETE_EXCLUDED_REGEX") \
        rc_ls `pwd`
    )
  popd
  if [ -z "${FilesToLink[*]}" ]; then
    echo "no files found to link: $torrentpath/$torrentname" \
      >> "$DOWNLOAD_COMPLETE_LOG_FILE"
    exit 1
  fi
  for File in "${FilesToLink[@]}"; do
    mkdir --verbose --parents "$DOWNLOAD_COMPLETE_DIR/$torrentname/$(dirname "$File")" || {
      echo "failed to create directory: $DOWNLOAD_COMPLETE_DIR/$torrentname/$(dirname "$File")" \
        >> "$DOWNLOAD_COMPLETE_LOG_FILE"
      exit 1
    }
    ln --verbose "$torrentpath/$torrentname/$File" "$DOWNLOAD_COMPLETE_DIR/$torrentname/$File" || {
      echo "failed to link: $torrentpath/$torrentname/$File" >> "$DOWNLOAD_COMPLETE_LOG_FILE"
      exit 1
    }
  done
else
  echo "failed to link, not a file or directory: $torrentpath/$torrentname" \
    >> "$DOWNLOAD_COMPLETE_LOG_FILE"
  exit 1
fi

exit 0
