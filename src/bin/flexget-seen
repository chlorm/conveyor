#!bash
# Copyright (c) 2017, Cody Opel <codyopel@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Populates flexget's seen list from library.

# TODO:
# - movie support
# - ignore season00 directory and movie equivalents

set -o errexit
set -o errtrace
set -o functrace
set -o nounset
set -o pipefail

PREFIX="$(readlink -f "$(readlink -f "$(dirname "$(readlink -f "$0")")")"/..)"
source "$PREFIX/share/conveyor/common.bash"

trap 'exit' ERR SIGINT SIGTERM

#declare -r MV_DIR="$RCLONE_REMOTE/$RCLONE_REMOTE_SORTED_DIR/movies"
declare -r TV_DIR="$RCLONE_REMOTE/$RCLONE_REMOTE_SORTED_DIR/television"
# XXX: maybe use flexget directory
declare -r CACHE="$(pwd)/flexget-seen-cache"


if [ ! -d "$CACHE" ]; then
  echo "Building file list cache..." >&2
  while read SortChar; do
    while read ShowTitle; do
      echo "caching: $ShowTitle"
      mkdir -p "$CACHE/$SortChar/$ShowTitle"
      rc_ls "$TV_DIR/$SortChar/$ShowTitle" > "$CACHE/$SortChar/$ShowTitle/list"
    done < <(rc_lsd "$TV_DIR/$SortChar")
  done < <(rc_lsd "$TV_DIR")
fi

while read ListFile; do
  echo "$(basename "$(dirname "$ListFile")")" >&2
  while read Item; do
    if [[ "${Item##*.}" == @(avi|mkv|mov|mp4|mpeg|mpg|mov|ts) ]]; then
      if [ -n "$(grep -oP 'season00/')" ]; then
        echo "skipping season00" >&2
        continue
      fi
      FileSanitized="$(echo "$(basename "$(dirname "$ListFile")")/$Item" | sed -e 's/^-/\\-/')"
      Guessit="$(guessit_wrapper "$FileSanitized")"
      ShowTitle="$(guessit_title "$Guessit")"

      # Flexget commonly returns an error status if there are other blocking
      # tasks in queue.  Retry until success
      FlexgetExit=1
      while [ $FlexgetExit -gt 0 ]; do
        ! flexget series add "$ShowTitle" "$(basename "$Item")" &
        FlexgetExit=$?
        FlexgetPid=$!
        wait $FlexgetPid
      done
    fi
  done < <(cat "$CACHE/$ListFile")
  rm -fv "$CACHE/$ListFile"
done < <(RCLONE_EXTRAS_ARGS='--include "list"' rc_ls "$CACHE")
