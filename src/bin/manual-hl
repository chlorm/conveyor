#!bash
# Copyright 2017, Cody Opel <codyopel@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Used by download-complete to hardlink files from data to complete directory.

# FIXME: add logging

set -o errexit
set -o errtrace
set -o functrace
set -o nounset
set -o pipefail

PREFIX="$(readlink -f "$(readlink -f "$(dirname "$(readlink -f "$0")")")"/..)"
source = "$PREFIX/share/conveyor/common.bash"

declare -r torrent="$1"

declare -r DelugeLogFile="$HOME/.deluge-complete.log"

if [ ! -d "$DOWNLOAD_COMPLETE_DIR" ]; then
  mkdir -p "$DOWNLOAD_COMPLETE_DIR"
fi

if [ ! -d "$DOWNLOAD_DATA_DIR" ]; then
  mkdir -p "$DOWNLOAD_DATA_DIR"
fi

if [ ! -e "$torrent" ]; then
  echo "torrent does not exist: $torrent" >&2
fi

# Hard link files to the complete directory
if [ -f "$torrent" ]; then
  ln "$torrent" "$DOWNLOAD_COMPLETE_DIR/$(basename "$torrent")" || {
    echo "failed to link: $torrent" >&2
    exit 1
  }
# Directories cannot be hard linked, so iterate over files.
elif [ -d "$torrent" ]; then
  pushd "$torrent"
    mapfile -t FilesToLink < <(
      RCLONE_LS_EXTRA_ARGS+=('--exclude' "$DOWNLOAD_COMPLETE_EXCLUDED_REGEX") \
        rc_ls `pwd`
    )
  popd
  if [ -z "${FilesToLink[*]}" ]; then
    echo "no files found to link: $torrent" >&2
    exit 1
  fi
  for File in "${FilesToLink[@]}"; do
    mkdir --verbose --parents "$DOWNLOAD_COMPLETE_DIR/$(basename "$torrent")/$(dirname "$File")"
    ln --verbose "$torrent/$File" "$DOWNLOAD_COMPLETE_DIR/$(basename "$torrent")/$File" || {
      echo "failed to link: $torrent/$File" >&2
    }
  done
else
  echo "failed to link, not a file or directory: $torrent" >&2
  exit 1
fi

echo "success: $torrent" >&2

exit 0
